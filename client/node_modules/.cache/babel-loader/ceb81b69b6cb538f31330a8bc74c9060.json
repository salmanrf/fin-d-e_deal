{"ast":null,"code":"import { wrapTryCatch } from \"./promise_utils\";\nexport async function fetchCurrentUser(token) {\n  const [response, errors] = await wrapTryCatch(fetch(\"http://localhost:8000/api/v1/users/current\", {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  }));\n\n  if (errors) {\n    return {\n      success: false,\n      errors\n    };\n  }\n\n  const result = await response.json();\n\n  if (response.status === 200) {\n    const {\n      user\n    } = result;\n    return {\n      success: true,\n      data: {\n        user\n      }\n    };\n  } else {\n    return {\n      success: false,\n      errors: {\n        msg: \"Invalid / token has expired\"\n      }\n    };\n  }\n}\nexport async function fetchCurrentUserWishlist(token) {\n  const [response, errors] = await wrapTryCatch(fetch(\"http://localhost:8000/api/v1/users/current/wishlists\", {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  }));\n\n  if (errors) {\n    return {\n      success: false,\n      errors\n    };\n  }\n\n  if (response.status === 200) {\n    const [{\n      wishlists\n    }, errors] = await wrapTryCatch(response.json());\n    if (errors) return {\n      success: false,\n      errors\n    };\n    return {\n      success: true,\n      data: {\n        wishlists\n      }\n    };\n  } else {\n    return {\n      success: false,\n      status: response.status\n    };\n  }\n}","map":{"version":3,"sources":["/Users/ozip/Documents/Web_Programming/fin-d-e_deal/client/src/utils/users_api.js"],"names":["wrapTryCatch","fetchCurrentUser","token","response","errors","fetch","headers","Authorization","success","result","json","status","user","data","msg","fetchCurrentUserWishlist","wishlists"],"mappings":"AAAA,SAASA,YAAT,QAA6B,iBAA7B;AAEA,OAAO,eAAeC,gBAAf,CAAgCC,KAAhC,EAAuC;AAC5C,QAAM,CAACC,QAAD,EAAWC,MAAX,IAAqB,MAAMJ,YAAY,CAC3CK,KAAK,CAAC,4CAAD,EAA+C;AAClDC,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,EAAG,UAASL,KAAM;AADxB;AADyC,GAA/C,CADsC,CAA7C;;AAQA,MAAIE,MAAJ,EAAY;AACV,WAAO;AAAEI,MAAAA,OAAO,EAAE,KAAX;AAAkBJ,MAAAA;AAAlB,KAAP;AACD;;AAED,QAAMK,MAAM,GAAG,MAAMN,QAAQ,CAACO,IAAT,EAArB;;AAEA,MAAIP,QAAQ,CAACQ,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,UAAM;AAAEC,MAAAA;AAAF,QAAWH,MAAjB;AAEA,WAAO;AAAED,MAAAA,OAAO,EAAE,IAAX;AAAiBK,MAAAA,IAAI,EAAE;AAAED,QAAAA;AAAF;AAAvB,KAAP;AACD,GAJD,MAIO;AACL,WAAO;AAAEJ,MAAAA,OAAO,EAAE,KAAX;AAAkBJ,MAAAA,MAAM,EAAE;AAAEU,QAAAA,GAAG,EAAE;AAAP;AAA1B,KAAP;AACD;AACF;AAED,OAAO,eAAeC,wBAAf,CAAwCb,KAAxC,EAA+C;AACpD,QAAM,CAACC,QAAD,EAAWC,MAAX,IAAqB,MAAMJ,YAAY,CAC3CK,KAAK,CAAC,sDAAD,EAAyD;AAC5DC,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,EAAG,UAASL,KAAM;AADxB;AADmD,GAAzD,CADsC,CAA7C;;AAQA,MAAIE,MAAJ,EAAY;AACV,WAAO;AAAEI,MAAAA,OAAO,EAAE,KAAX;AAAkBJ,MAAAA;AAAlB,KAAP;AACD;;AAED,MAAID,QAAQ,CAACQ,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,UAAM,CAAC;AAAEK,MAAAA;AAAF,KAAD,EAAgBZ,MAAhB,IAA0B,MAAMJ,YAAY,CAACG,QAAQ,CAACO,IAAT,EAAD,CAAlD;AAEA,QAAIN,MAAJ,EAAY,OAAO;AAAEI,MAAAA,OAAO,EAAE,KAAX;AAAkBJ,MAAAA;AAAlB,KAAP;AAEZ,WAAO;AAAEI,MAAAA,OAAO,EAAE,IAAX;AAAiBK,MAAAA,IAAI,EAAE;AAAEG,QAAAA;AAAF;AAAvB,KAAP;AACD,GAND,MAMO;AACL,WAAO;AAAER,MAAAA,OAAO,EAAE,KAAX;AAAkBG,MAAAA,MAAM,EAAER,QAAQ,CAACQ;AAAnC,KAAP;AACD;AACF","sourcesContent":["import { wrapTryCatch } from \"./promise_utils\";\n\nexport async function fetchCurrentUser(token) {\n  const [response, errors] = await wrapTryCatch(\n    fetch(\"http://localhost:8000/api/v1/users/current\", {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    })\n  );\n\n  if (errors) {\n    return { success: false, errors };\n  }\n\n  const result = await response.json();\n\n  if (response.status === 200) {\n    const { user } = result;\n\n    return { success: true, data: { user } };\n  } else {\n    return { success: false, errors: { msg: \"Invalid / token has expired\" } };\n  }\n}\n\nexport async function fetchCurrentUserWishlist(token) {\n  const [response, errors] = await wrapTryCatch(\n    fetch(\"http://localhost:8000/api/v1/users/current/wishlists\", {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    })\n  );\n\n  if (errors) {\n    return { success: false, errors };\n  }\n\n  if (response.status === 200) {\n    const [{ wishlists }, errors] = await wrapTryCatch(response.json());\n\n    if (errors) return { success: false, errors };\n\n    return { success: true, data: { wishlists } };\n  } else {\n    return { success: false, status: response.status };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}