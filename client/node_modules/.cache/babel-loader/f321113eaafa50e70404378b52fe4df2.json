{"ast":null,"code":"import { wrapTryCatch } from \"./promise_utils\";\nexport async function fetchSignup(credentials) {\n  const {\n    fullName,\n    username,\n    password\n  } = credentials;\n  let [res, err] = await wrapTryCatch(fetch(\"http://localhost:8000/api/v1/auth/signup\", {\n    method: \"POST\",\n    credentials: \"include\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      fullName,\n      username,\n      password\n    })\n  }));\n  const {\n    status\n  } = res;\n\n  if (err) {\n    return {\n      success: false,\n      errors: {\n        msg: \"Error connecting to server\"\n      }\n    };\n  }\n\n  [res, err] = await wrapTryCatch(res.json());\n\n  if (status === 201) {\n    const {\n      user\n    } = res;\n    return {\n      success: true,\n      data: {\n        user\n      }\n    };\n  } else {\n    return {\n      success: false,\n      errors: { ...res.errors\n      }\n    };\n  }\n}\nexport async function fetchLogin(credentials) {\n  const {\n    username,\n    password\n  } = credentials;\n  let [res, err] = await wrapTryCatch(fetch(\"http://localhost:8000/api/v1/auth/signin\", {\n    method: \"POST\",\n    credentials: \"include\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      username,\n      password\n    })\n  }));\n  const {\n    status\n  } = res;\n\n  if (err) {\n    return {\n      success: false,\n      errors: {\n        msg: \"Error connecting to server\"\n      }\n    };\n  }\n\n  [res, err] = await wrapTryCatch(res.json());\n\n  if (status === 200) {\n    const {\n      token,\n      user\n    } = res;\n    return {\n      success: true,\n      data: {\n        token,\n        user\n      }\n    };\n  } else {\n    return {\n      success: false,\n      errors: { ...res.errors\n      }\n    };\n  }\n}\nexport async function fetchLogout(token) {\n  const {\n    status\n  } = await fetch(`http://localhost:8000/api/v1/auth/signout`, {\n    method: \"GET\",\n    credentials: \"include\",\n    headers: {\n      \"Authorization\": `Bearer ${token}`\n    }\n  });\n  if (status === 200) return {\n    success: true\n  };else return {\n    success: false\n  };\n}\nexport async function fetchRefresh() {\n  const [res, err] = await wrapTryCatch(fetch(\"http://localhost:8000/api/v1/auth/refresh\", {\n    credentials: \"include\"\n  }));\n  if (err) return {\n    success: false,\n    errors: {\n      msg: \"Error connecting to server\"\n    }\n  };\n\n  if (res.status === 200) {\n    const {\n      token\n    } = await res.json();\n    return {\n      success: true,\n      data: {\n        token\n      }\n    };\n  } else {\n    return {\n      success: false\n    };\n  }\n}","map":{"version":3,"sources":["/Users/ozip/Documents/Web_Programming/fin-d-e_deal/client/src/utils/auth_api.js"],"names":["wrapTryCatch","fetchSignup","credentials","fullName","username","password","res","err","fetch","method","headers","body","JSON","stringify","status","success","errors","msg","json","user","data","fetchLogin","token","fetchLogout","fetchRefresh"],"mappings":"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","sourcesContent":["import {wrapTryCatch} from \"./promise_utils\";\n\nexport async function fetchSignup(credentials) {\n  const {fullName, username, password} = credentials;\n  \n  let [res, err] = await wrapTryCatch(\n    fetch(\"http://localhost:8000/api/v1/auth/signup\", {\n      method: \"POST\",\n      credentials: \"include\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({fullName, username, password})\n    }\n  ));\n\n  const {status} = res;\n\n  if(err) {\n    return {success: false, errors: {msg: \"Error connecting to server\"}};\n  }\n\n  [res, err] = await wrapTryCatch(res.json());\n  \n  if(status === 201) {\n    const {user} = res;\n\n    return {success: true, data: {user}};\n  } else {\n    return {success: false, errors: {...res.errors}};\n  }\n}\n\nexport async function fetchLogin(credentials) {\n  const {username, password} = credentials;\n  \n  let [res, err] = await wrapTryCatch(\n    fetch(\"http://localhost:8000/api/v1/auth/signin\", {\n      method: \"POST\",\n      credentials: \"include\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({username, password})\n    }\n  ));\n\n  const {status} = res;\n\n  if(err) {\n    return {success: false, errors: {msg: \"Error connecting to server\"}};\n  }\n\n  [res, err] = await wrapTryCatch(res.json());\n  \n  if(status === 200) {\n    const {token, user} = res;\n\n    return {success: true, data: {token, user}};\n  } else {\n    return {success: false, errors: {...res.errors}};\n  }\n}\n\nexport async function fetchLogout(token) {\n  const {status} = await fetch(`http://localhost:8000/api/v1/auth/signout`, {\n    method: \"GET\",\n    credentials: \"include\",\n    headers: {\n      \"Authorization\": `Bearer ${token}`\n    }\n  });\n\n  if(status === 200)\n    return {success: true};\n  else \n    return {success: false};\n}\n\nexport async function fetchRefresh() {\n  const [res, err] = await wrapTryCatch(fetch(\"http://localhost:8000/api/v1/auth/refresh\", {\n    credentials: \"include\"\n  }));\n\n  if(err) \n    return {success: false, errors: {msg: \"Error connecting to server\"}};\n  \n  if(res.status === 200) {\n    const {token} = await res.json();\n\n    return {success: true, data: {token}};\n  } else {\n    return {success: false}\n  }\n}"]},"metadata":{},"sourceType":"module"}