{"ast":null,"code":"import { wrapTryCatch } from \"./promise_utils\";\nexport async function fetchGameById(gameid) {\n  const [response, errors] = await wrapTryCatch(fetch(`http://localhost:8000/api/v1/games/igdb/item/${gameid}`));\n\n  if (errors) {\n    return {\n      success: false,\n      errors\n    };\n  }\n\n  if (response.status === 200) {\n    const [{\n      game\n    }, errors] = await wrapTryCatch(response.json());\n    if (errors) return {\n      success: false,\n      errors\n    };\n    return {\n      success: true,\n      data: {\n        game\n      }\n    };\n  }\n}\nexport async function fetchGameCompanies(companies = []) {\n  const [response, errors] = await wrapTryCatch(fetch(`http://localhost:8000/api/v1/games/igdb/companies`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      involved_companies: companies instanceof Array ? companies : [companies]\n    })\n  }));\n\n  if (errors) {\n    return {\n      success: false,\n      errors\n    };\n  }\n\n  if (response.status === 200) {\n    const [{\n      companies\n    }, errors] = await wrapTryCatch(response.json());\n    if (errors) return {\n      success: false,\n      errors\n    };\n    return {\n      success: true,\n      data: {\n        companies\n      }\n    };\n  }\n} // websites is a array of object, each must have url and category as properties\n\nexport async function fetchGameStores(gameid, websites) {\n  const [response, errors] = await wrapTryCatch(fetch(`http://localhost:8000/api/v1/games/igdb/item/${gameid}/stores`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      websites\n    })\n  }));\n\n  if (errors) {\n    return {\n      success: false,\n      errors\n    };\n  }\n\n  if (response.status === 200) {\n    const [{\n      stores\n    }, errors] = await wrapTryCatch(response.json());\n    if (errors) return {\n      success: false,\n      errors\n    };\n    return {\n      success: true,\n      data: {\n        stores\n      }\n    };\n  }\n}\nexport async function fetchSearchGames(keyword, page) {\n  const [response, errors] = await wrapTryCatch(fetch(`http://localhost:8000/api/v1/games/search/?keyword=${keyword}&page=${page}`));\n\n  if (errors) {\n    return {\n      success: false,\n      errors\n    };\n  }\n\n  if (response.status === 200) {\n    const [{\n      games\n    }, errors] = await wrapTryCatch(response.json());\n    if (errors) return {\n      success: false,\n      errors\n    };\n    return {\n      success: true,\n      data: {\n        games\n      }\n    };\n  }\n}\nexport async function fetchAddRemoveWishlist(gameid, token) {\n  const [response, errors] = await wrapTryCatch(fetch(\"http://localhost:8000/api/v1/games/wishlist\", {\n    method: \"POST\",\n    headers: {\n      Authorization: `Bearer ${token}`,\n      \"Content-Type\": \"text/plain\"\n    },\n    body: gameid\n  }));\n\n  if (errors) {\n    return {\n      success: false,\n      errors\n    };\n  }\n\n  if (response.status === 201) {\n    return {\n      success: true\n    };\n  } else {\n    return {\n      success: false\n    };\n  }\n}","map":{"version":3,"sources":["/Users/ozip/Documents/Web_Programming/fin-d-e_deal/client/src/utils/games_api.js"],"names":["wrapTryCatch","fetchGameById","gameid","response","errors","fetch","success","status","game","json","data","fetchGameCompanies","companies","method","headers","body","JSON","stringify","involved_companies","Array","fetchGameStores","websites","stores","fetchSearchGames","keyword","page","games","fetchAddRemoveWishlist","token","Authorization"],"mappings":"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","sourcesContent":["import { wrapTryCatch } from \"./promise_utils\";\n\nexport async function fetchGameById(gameid) {\n  const [response, errors] = await wrapTryCatch(\n    fetch(`http://localhost:8000/api/v1/games/igdb/item/${gameid}`)\n  );\n\n  if (errors) {\n    return { success: false, errors };\n  }\n\n  if (response.status === 200) {\n    const [{ game }, errors] = await wrapTryCatch(response.json());\n\n    if (errors) return { success: false, errors };\n\n    return { success: true, data: { game } };\n  }\n}\n\nexport async function fetchGameCompanies(companies = []) {\n  const [response, errors] = await wrapTryCatch(\n    fetch(`http://localhost:8000/api/v1/games/igdb/companies`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        involved_companies:\n          companies instanceof Array ? companies : [companies],\n      }),\n    })\n  );\n\n  if (errors) {\n    return { success: false, errors };\n  }\n\n  if (response.status === 200) {\n    const [{ companies }, errors] = await wrapTryCatch(response.json());\n\n    if (errors) return { success: false, errors };\n\n    return { success: true, data: { companies } };\n  }\n}\n\n// websites is a array of object, each must have url and category as properties\nexport async function fetchGameStores(gameid, websites) {\n  const [response, errors] = await wrapTryCatch(\n    fetch(`http://localhost:8000/api/v1/games/igdb/item/${gameid}/stores`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ websites }),\n    })\n  );\n\n  if (errors) {\n    return { success: false, errors };\n  }\n\n  if (response.status === 200) {\n    const [{ stores }, errors] = await wrapTryCatch(response.json());\n\n    if (errors) return { success: false, errors };\n\n    return { success: true, data: { stores } };\n  }\n}\n\nexport async function fetchSearchGames(keyword, page) {\n  const [response, errors] = await wrapTryCatch(\n    fetch(\n      `http://localhost:8000/api/v1/games/search/?keyword=${keyword}&page=${page}`\n    )\n  );\n\n  if (errors) {\n    return { success: false, errors };\n  }\n\n  if (response.status === 200) {\n    const [{ games }, errors] = await wrapTryCatch(response.json());\n\n    if (errors) return { success: false, errors };\n\n    return { success: true, data: { games } };\n  }\n}\n\nexport async function fetchAddRemoveWishlist(gameid, token) {\n  const [response, errors] = await wrapTryCatch(\n    fetch(\"http://localhost:8000/api/v1/games/wishlist\", {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"text/plain\",\n      },\n      body: gameid,\n    })\n  );\n\n  if (errors) {\n    return { success: false, errors };\n  }\n\n  if (response.status === 201) {\n    return { success: true };\n  } else {\n    return { success: false };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}